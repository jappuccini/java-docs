"use strict";(self.webpackChunkjava_docs=self.webpackChunkjava_docs||[]).push([["7993"],{32946:function(e,a,r){r.r(a),r.d(a,{frontMatter:()=>t,toc:()=>o,default:()=>m,metadata:()=>n,assets:()=>l,contentTitle:()=>c});var n=JSON.parse('{"id":"exam-exercises/exam-exercises-java2/queries/characters","title":"Spielfiguren","description":"","source":"@site/docs/exam-exercises/exam-exercises-java2/queries/characters.md","sourceDirName":"exam-exercises/exam-exercises-java2/queries","slug":"/exam-exercises/exam-exercises-java2/queries/characters","permalink":"/java-docs/production/exam-exercises/exam-exercises-java2/queries/characters","draft":false,"unlisted":false,"editUrl":"https://github.com/jappuccini/java-docs/tree/main/docs/exam-exercises/exam-exercises-java2/queries/characters.md","tags":[{"inline":true,"label":"interfaces","permalink":"/java-docs/production/tags/interfaces"},{"inline":true,"label":"comparators","permalink":"/java-docs/production/tags/comparators"},{"inline":true,"label":"records","permalink":"/java-docs/production/tags/records"},{"inline":true,"label":"maps","permalink":"/java-docs/production/tags/maps"},{"inline":true,"label":"optionals","permalink":"/java-docs/production/tags/optionals"},{"inline":true,"label":"java-stream-api","permalink":"/java-docs/production/tags/java-stream-api"}],"version":"current","frontMatter":{"title":"Spielfiguren","description":"","tags":["interfaces","comparators","records","maps","optionals","java-stream-api"]},"sidebar":"examExercisesSidebar","previous":{"title":"Abfragen","permalink":"/java-docs/production/exam-exercises/exam-exercises-java2/queries/"},"next":{"title":"St\xe4dte","permalink":"/java-docs/production/exam-exercises/exam-exercises-java2/queries/cities"}}'),s=r(74848),i=r(84429);let t={title:"Spielfiguren",description:"",tags:["interfaces","comparators","records","maps","optionals","java-stream-api"]},c,l={},o=[{value:"Klassendiagramm",id:"klassendiagramm",level:2},{value:"Allgemeine Hinweise",id:"allgemeine-hinweise",level:2},{value:"Hinweise zur Klasse <em>CharacterQueries</em>",id:"hinweise-zur-klasse-characterqueries",level:2}];function d(e){let a={code:"code",em:"em",h2:"h2",li:"li",mermaid:"mermaid",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.p,{children:"Setze das abgebildete Klassendiagramm vollst\xe4ndig um. Erstelle zum Testen eine\nausf\xfchrbare Klasse und/oder eine Testklasse."}),"\n",(0,s.jsx)(a.h2,{id:"klassendiagramm",children:"Klassendiagramm"}),"\n",(0,s.jsx)(a.mermaid,{value:"classDiagram\n   Character o-- Race\n   Character o-- Profession\n   CharacterQueries --o Character\n   Comparable~T~ <|.. Character: implements\n   class Race {\n      <<enumeration>>\n      HUMAN, ORC, DWARF,...\n   }\n   class Profession {\n      <<enumeration>>\n      HUNTER, MAGE, WARRIOR,...\n   }\n   class Character {\n      <<record>>\n      name: String\n      race: Race\n      profession: Profession\n      level: int\n      experiencePoints: int\n      +compareTo(other: Character) int\n   }\n   class Comparable~T~ {\n      <<interface>>\n      +compareTo(other: T) int\n   }\n   class CharacterQueries {\n      <<record>>\n      characters: List~Character~\n      +getAnyOrcHunter() Optional~Character~\n      +getNumberOfCharactersByName(name: String) long\n      +getAverageExperiencePointsOfAllMages() OptionalDouble\n      +getUniqueCharacterNames() List~String~\n      +getCharactersByRace() Map~Race&sbquo; List~Character~~\n   }"}),"\n",(0,s.jsx)(a.h2,{id:"allgemeine-hinweise",children:"Allgemeine Hinweise"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsx)(a.li,{children:"Aus Gr\xfcnden der \xdcbersicht werden im Klassendiagramm keine Getter und\nObject-Methoden dargestellt"}),"\n",(0,s.jsx)(a.li,{children:"So nicht anders angegeben, sollen Konstruktoren, Setter, Getter sowie die\nObject-Methoden wie gewohnt implementiert werden"}),"\n"]}),"\n",(0,s.jsxs)(a.h2,{id:"hinweise-zur-klasse-characterqueries",children:["Hinweise zur Klasse ",(0,s.jsx)(a.em,{children:"CharacterQueries"})]}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:["Die Methode ",(0,s.jsx)(a.code,{children:"Optional<Character> getAnyOrcHunter()"})," soll einen beliebigen\nOrk-J\xe4ger zur\xfcckgeben"]}),"\n",(0,s.jsxs)(a.li,{children:["Die Methode ",(0,s.jsx)(a.code,{children:"long getNumberOfCharactersByName(name: String)"})," soll die Anzahl\naller Spielfiguren zum eingehenden Namen zur\xfcckgeben"]}),"\n",(0,s.jsxs)(a.li,{children:["Die Methode ",(0,s.jsx)(a.code,{children:"OptionalDouble getAverageExperiencePointsOfAllMages()"})," soll die\ndurchschnittlichen Erfahrungspunkte aller Magier zur\xfcckgeben"]}),"\n",(0,s.jsxs)(a.li,{children:["Die Methode ",(0,s.jsx)(a.code,{children:"List<String> getUniqueCharacterNames()"})," soll die Namen aller\nSpielfiguren ohne Dopplungen absteigend sortiert zur\xfcckgeben"]}),"\n",(0,s.jsxs)(a.li,{children:["Die Methode ",(0,s.jsx)(a.code,{children:"Map<Race, List<Character>> getCharactersByRace()"})," soll alle\nSpielfiguren gruppiert nach der Rasse zur\xfcckgeben"]}),"\n"]})]})}function m(e={}){let{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},84429:function(e,a,r){r.d(a,{R:()=>t,x:()=>c});var n=r(96540);let s={},i=n.createContext(s);function t(e){let a=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),n.createElement(i.Provider,{value:a},e.children)}}}]);