"use strict";(self.webpackChunkjava_docs=self.webpackChunkjava_docs||[]).push([["3144"],{94517:function(e,t,a){a.r(t),a.d(t,{frontMatter:()=>l,toc:()=>c,default:()=>m,metadata:()=>s,assets:()=>u,contentTitle:()=>o});var s=JSON.parse('{"id":"exercises/activity-diagrams/activity-diagrams01","title":"ActivityDiagrams01","description":"","source":"@site/docs/exercises/activity-diagrams/activity-diagrams01.mdx","sourceDirName":"exercises/activity-diagrams","slug":"/exercises/activity-diagrams/activity-diagrams01","permalink":"/java-docs/production/exercises/activity-diagrams/activity-diagrams01","draft":false,"unlisted":false,"editUrl":"https://github.com/jappuccini/java-docs/tree/main/docs/exercises/activity-diagrams/activity-diagrams01.mdx","tags":[],"version":"current","frontMatter":{"title":"ActivityDiagrams01","description":""},"sidebar":"exercisesSidebar","previous":{"title":"Aktivit\xe4tsdiagramme","permalink":"/java-docs/production/exercises/activity-diagrams/"},"next":{"title":"Polymorphie","permalink":"/java-docs/production/exercises/polymorphy/"}}'),i=a(74848),n=a(84429),r=a(69714);let l={title:"ActivityDiagrams01",description:""},o,u={},c=[{value:"Klassendiagramm",id:"klassendiagramm",level:2},{value:"Aktivit\xe4tsdiagramm zur Methode <em>void main(args: String[])</em>",id:"aktivit\xe4tsdiagramm-zur-methode-void-mainargs-string",level:2},{value:"Aktivit\xe4tsdiagramm zur Methode <em>void play()</em>",id:"aktivit\xe4tsdiagramm-zur-methode-void-play",level:2},{value:"Aktivit\xe4tsdiagramm zur Methode <em>boolean move(name: String)</em>",id:"aktivit\xe4tsdiagramm-zur-methode-boolean-movename-string",level:2}];function d(e){let t={code:"code",em:"em",h2:"h2",mermaid:"mermaid",p:"p",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["Erstelle die Klasse ",(0,i.jsx)(t.code,{children:"MainClass"})," anhand des abgebildeten Klassendiagramms sowie\nden abgebildeten Aktivit\xe4tsdiagrammen."]}),"\n",(0,i.jsx)(t.h2,{id:"klassendiagramm",children:"Klassendiagramm"}),"\n",(0,i.jsx)(t.mermaid,{value:"classDiagram\n    class MainClass {\n        -scanner: Scanner$\n        -randomNumber: int$\n        +main(args: String[])$ void\n        +play()$ void\n        +move(name: String)$ boolean\n    }"}),"\n",(0,i.jsxs)(t.h2,{id:"aktivit\xe4tsdiagramm-zur-methode-void-mainargs-string",children:["Aktivit\xe4tsdiagramm zur Methode ",(0,i.jsx)(t.em,{children:"void main(args: String[])"})]}),"\n",(0,i.jsx)(t.mermaid,{value:'stateDiagram-v2\n    state "Konsoleneingabe initialisieren" as state1\n    state "[Zufallszahl] erzeugen" as state2\n    state "Ausf\xfchren: [Spielen]" as state3\n\n    state "Ratespiel" as main {\n        [*] --\x3e state1\n        state1 --\x3e state2\n        state2 --\x3e state3\n        state3 --\x3e [*]\n    }'}),"\n",(0,i.jsxs)(t.h2,{id:"aktivit\xe4tsdiagramm-zur-methode-void-play",children:["Aktivit\xe4tsdiagramm zur Methode ",(0,i.jsx)(t.em,{children:"void play()"})]}),"\n",(0,i.jsx)(t.mermaid,{value:'stateDiagram-v2\n    state "Ausgabe: Spieler 1, Name eingeben" as state1\n    state "Eingabe: [Name 1]" as state2\n    state "Ausgabe: Spieler 2, Name eingeben" as state3\n    state "Eingabe: [Name 2]" as state4\n    state "Ausf\xfchren: [Zug] mit [Name 1]" as state5\n    state "Ausf\xfchren: [Zug] mit [Name 2]" as state6\n\n    state if1 <<choice>>\n    state if2 <<choice>>\n    state fork1 <<fork>>\n\n    state "Spielen" as play {\n        [*] --\x3e state1\n        state1 --\x3e state2\n        state2 --\x3e state3\n        state3 --\x3e state4\n        state4 --\x3e state5\n        state5 --\x3e if1\n        if1 --\x3e fork1: sonst\n        if1 --\x3e state6: R\xfcckgabe = true\n        state6 --\x3e if2\n        if2 --\x3e state5: R\xfcckgabe = true\n        if2 --\x3e fork1: sonst\n        fork1 --\x3e [*]\n    }'}),"\n",(0,i.jsxs)(t.h2,{id:"aktivit\xe4tsdiagramm-zur-methode-boolean-movename-string",children:["Aktivit\xe4tsdiagramm zur Methode ",(0,i.jsx)(t.em,{children:"boolean move(name: String)"})]}),"\n",(0,i.jsx)(t.mermaid,{value:'stateDiagram-v2\n    state "Ausgabe: [Name], Tipp eingeben" as state1\n    state "Eingabe: [Tipp]" as state2\n    state "Ausgabe: Richtig, das war die gesuchte Zahl" as state3\n    state "R\xfcckgabe: true" as state4\n    state "Ausgabe: Die gesuchte Zahl ist kleiner" as state5\n    state "Ausgabe: Die gesuchte Zahl ist gr\xf6\xdfer" as state6\n    state "R\xfcckgabe: false" as state7\n\n    state if1 <<choice>>\n    state fork1 <<fork>>\n    state fork2 <<fork>>\n\n    state "Zug" as move {\n        [*] --\x3e state1\n        state1 --\x3e state2\n        state2 --\x3e if1\n        if1 --\x3e state3: sonst\n        if1 --\x3e state5: [Tipp] > [Zufallszahl]\n        if1 --\x3e state6: [Tipp] < [Zufallszahl]\n        state3 --\x3e state4\n        state4 --\x3e fork2\n        state5 --\x3e fork1\n        state6 --\x3e fork1\n        fork1 --\x3e state7\n        state7 --\x3e fork2\n        fork2 --\x3e [*]\n    }'}),"\n",(0,i.jsx)(r.A,{pullRequest:"35",branchSuffix:"activity-diagrams/01"})]})}function m(e={}){let{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},93703:function(e,t,a){a.d(t,{A:()=>n});var s=a(74848);a(96540);var i=a(39836);function n({children:e,hidden:t,className:a}){return(0,s.jsx)("div",{role:"tabpanel",className:(0,i.A)("tabItem_Ymn6",a),hidden:t,children:e})}},84109:function(e,t,a){a.d(t,{A:()=>x});var s=a(74848),i=a(96540),n=a(39836),r=a(16364),l=a(68251),o=a(56347),u=a(28004),c=a(25580),d=a(12213),m=a(75734);function g(e){return i.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){let{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h({value:e,tabValues:t}){return t.some(t=>t.value===e)}var v=a(98864);function p({className:e,block:t,selectedValue:a,selectValue:i,tabValues:r}){let o=[],{blockElementScrollPositionUntilNextRender:u}=(0,l.a_)(),c=e=>{let t=e.currentTarget,s=r[o.indexOf(t)].value;s!==a&&(u(t),i(s))},d=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{let a=o.indexOf(e.currentTarget)+1;t=o[a]??o[0];break}case"ArrowLeft":{let a=o.indexOf(e.currentTarget)-1;t=o[a]??o[o.length-1]}}t?.focus()};return(0,s.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,n.A)("tabs",{"tabs--block":t},e),children:r.map(({value:e,label:t,attributes:i})=>(0,s.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:e=>{o.push(e)},onKeyDown:d,onClick:c,...i,className:(0,n.A)("tabs__item","tabItem_LNqP",i?.className,{"tabs__item--active":a===e}),children:t??e},e))})}function f({lazy:e,children:t,selectedValue:a}){let r=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){let e=r.find(e=>e.props.value===a);return e?(0,i.cloneElement)(e,{className:(0,n.A)("margin-top--md",e.props.className)}):null}return(0,s.jsx)("div",{className:"margin-top--md",children:r.map((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==a}))})}function b(e){let t=function(e){let t,{defaultValue:a,queryString:s=!1,groupId:n}=e,r=function(e){let{values:t,children:a}=e;return(0,i.useMemo)(()=>{let e=t??g(a).map(({props:{value:e,label:t,attributes:a,default:s}})=>({value:e,label:t,attributes:a,default:s})),s=(0,d.XI)(e,(e,t)=>e.value===t.value);if(s.length>0)throw Error(`Docusaurus error: Duplicate values "${s.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`);return e},[t,a])}(e),[l,v]=(0,i.useState)(()=>(function({defaultValue:e,tabValues:t}){if(0===t.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:t}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}let a=t.find(e=>e.default)??t[0];if(!a)throw Error("Unexpected error: 0 tabValues");return a.value})({defaultValue:a,tabValues:r})),[p,f]=function({queryString:e=!1,groupId:t}){let a=(0,o.W6)(),s=function({queryString:e=!1,groupId:t}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,c.aZ)(s),(0,i.useCallback)(e=>{if(!s)return;let t=new URLSearchParams(a.location.search);t.set(s,e),a.replace({...a.location,search:t.toString()})},[s,a])]}({queryString:s,groupId:n}),[b,x]=function({groupId:e}){let t=e?`docusaurus.tab.${e}`:null,[a,s]=(0,m.Dv)(t);return[a,(0,i.useCallback)(e=>{t&&s.set(e)},[t,s])]}({groupId:n}),j=h({value:t=p??b,tabValues:r})?t:null;return(0,u.A)(()=>{j&&v(j)},[j]),{selectedValue:l,selectValue:(0,i.useCallback)(e=>{if(!h({value:e,tabValues:r}))throw Error(`Can't select invalid tab value=${e}`);v(e),f(e),x(e)},[f,x,r]),tabValues:r}}(e);return(0,s.jsxs)("div",{className:(0,n.A)(r.G.tabs.container,"tabs-container","tabList__CuJ"),children:[(0,s.jsx)(p,{...t,...e}),(0,s.jsx)(f,{...t,...e})]})}function x(e){let t=(0,v.A)();return(0,s.jsx)(b,{...e,children:g(e.children)},String(t))}},69714:function(e,t,a){a.d(t,{A:()=>o});var s=a(74848);a(96540);var i=a(84109),n=a(93703),r=a(12801),l=a(60464);function o({pullRequest:e,branchSuffix:t}){return(0,s.jsxs)(i.A,{children:[(0,s.jsxs)(n.A,{value:"exercise",label:"Exercise",default:!0,children:[(0,s.jsx)(l.A,{language:"console",children:`git switch exercises/${t}`}),(0,s.jsx)(r.A,{to:`https://gitpod.io/#https://github.com/jappuccini/java-exercises/blob/exercises/${t}/Exercise.java`,children:(0,s.jsx)("img",{alt:"Open in Gitpod",src:"https://gitpod.io/button/open-in-gitpod.svg"})})]}),(0,s.jsxs)(n.A,{value:"solution",label:"Solution",children:[(0,s.jsx)(l.A,{language:"console",children:`git switch solutions/${t}`}),(0,s.jsx)(r.A,{to:`https://gitpod.io/#https://github.com/jappuccini/java-exercises/blob/solutions/${t}/Exercise.java`,children:(0,s.jsx)("img",{alt:"Open in Gitpod",src:"https://gitpod.io/button/open-in-gitpod.svg"})})]}),(0,s.jsxs)(n.A,{value:"pullrequest",label:"Pull Request",children:["Alle \xa0\xc4nderungen zwischen der Aufgabe und der L\xf6sung findest du im Pull Request"," ",(0,s.jsxs)(r.A,{to:`https://github.com/jappuccini/java-exercises/pull/${e}/files?diff=split`,children:["PR#",e]})]})]})}}}]);