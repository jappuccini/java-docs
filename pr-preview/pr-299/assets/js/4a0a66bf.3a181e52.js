"use strict";(self.webpackChunkjava_docs=self.webpackChunkjava_docs||[]).push([["2827"],{65249:function(e,n,i){i.r(n),i.d(n,{default:()=>h,frontMatter:()=>l,metadata:()=>r,assets:()=>t,toc:()=>c,contentTitle:()=>d});var r=JSON.parse('{"id":"additional-material/steffen/java-1/exam-preparation/2025","title":"2025","description":"","source":"@site/docs/additional-material/steffen/java-1/exam-preparation/2025.mdx","sourceDirName":"additional-material/steffen/java-1/exam-preparation","slug":"/additional-material/steffen/java-1/exam-preparation/2025","permalink":"/java-docs/pr-preview/pr-299/additional-material/steffen/java-1/exam-preparation/2025","draft":false,"unlisted":false,"editUrl":"https://github.com/jappuccini/java-docs/tree/main/docs/additional-material/steffen/java-1/exam-preparation/2025.mdx","tags":[],"version":"current","sidebarPosition":80,"frontMatter":{"title":"2025","description":"","sidebar_position":80,"tags":[]},"sidebar":"additionalMaterialSidebar","previous":{"title":"Klausurvorbereitung","permalink":"/java-docs/pr-preview/pr-299/additional-material/steffen/java-1/exam-preparation/"},"next":{"title":"2024","permalink":"/java-docs/pr-preview/pr-299/additional-material/steffen/java-1/exam-preparation/2024"}}'),s=i("85893"),a=i("50065");let l={title:2025,description:"",sidebar_position:80,tags:[]},d=void 0,t={},c=[{value:"Probeklausur Moodle",id:"probeklausur-moodle",level:2},{value:"Aufgabe 1",id:"aufgabe-1",level:3},{value:"L\xf6sung Aufgabe 2",id:"l\xf6sung-aufgabe-2",level:3},{value:"ExamTask02",id:"examtask02",level:4},{value:"OperatingSystem",id:"operatingsystem",level:4},{value:"Device",id:"device",level:4},{value:"Phone",id:"phone",level:4},{value:"Laptop",id:"laptop",level:4},{value:"Klausur Moodle",id:"klausur-moodle",level:2},{value:"Aufgabenstellung",id:"aufgabenstellung",level:3},{value:"Aufgabe 1 (45 Punkte)",id:"aufgabe-1-45-punkte",level:4},{value:"Glossar",id:"glossar",level:5},{value:"Klassendiagramm",id:"klassendiagramm",level:5},{value:"Hinweise zur Klasse NoSpaceException",id:"hinweise-zur-klasse-nospaceexception",level:5},{value:"Hinweise zur Klasse Cage",id:"hinweise-zur-klasse-cage",level:5},{value:"Hinweise zur Klasse Area",id:"hinweise-zur-klasse-area",level:5},{value:"Hinweise zur Klasse CageSpaceComparator",id:"hinweise-zur-klasse-cagespacecomparator",level:5},{value:"Hinweise zur Klasse Zoo",id:"hinweise-zur-klasse-zoo",level:5},{value:"Hinweise zur Klasse ExamTask01",id:"hinweise-zur-klasse-examtask01",level:5},{value:"Aufgabe 2 (5 Punkte)",id:"aufgabe-2-5-punkte",level:4},{value:"Java API",id:"java-api",level:4},{value:"Java Collections Framework",id:"java-collections-framework",level:4},{value:"Schnittstellen",id:"schnittstellen",level:4},{value:"L\xf6sungsvorschlag",id:"l\xf6sungsvorschlag",level:3},{value:"Aufgabe 1 (45 Punkte)",id:"aufgabe-1-45-punkte-1",level:4},{value:"Animal (2.5 Punkte)",id:"animal-25-punkte",level:5},{value:"Cage (8.5 Punkte)",id:"cage-85-punkte",level:5},{value:"NoSpaceException (2 Punkte)",id:"nospaceexception-2-punkte",level:5},{value:"Area (13 Punkte)",id:"area-13-punkte",level:5},{value:"CageSpaceComparator (6 Punkte)",id:"cagespacecomparator-6-punkte",level:5},{value:"Zoo (7 Punkte)",id:"zoo-7-punkte",level:5},{value:"ExamTask01 (6 Punkte)",id:"examtask01-6-punkte",level:5}];function o(e){let n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"probeklausur-moodle",children:"Probeklausur Moodle"}),"\n",(0,s.jsx)(n.h3,{id:"aufgabe-1",children:"Aufgabe 1"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:i(1153).Z+"",children:"Klausur"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:i(61705).Z+"",children:"Aufgabe 1"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:i(6887).Z+"",children:"Klassendiagramm Aufgabe 1"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:i(47863).Z+"",children:"Aufgabe 2"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:i(624).Z+"",children:"Klassendiagramm Aufgabe 2"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:i(94594).Z+"",children:"Aufgabe 3"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:i(42812).Z+"",children:"Java Api"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"l\xf6sung-aufgabe-2",children:"L\xf6sung Aufgabe 2"}),"\n",(0,s.jsx)(n.h4,{id:"examtask02",children:"ExamTask02"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public class ExamTask02 {\n  public static void main(String[] args) {\n    new Phone(OperatingSystem.ANDROID, false);\n    new Phone(OperatingSystem.IOS, false);\n    new Laptop(OperatingSystem.LINUX, 11);\n    new Laptop(OperatingSystem.WINDOWS, 11);\n    int securePhones = 0;\n    int secureLaptops = 0;\n    for (Device device : Device.getAllDevices()) {\n      if (device.isSecure()) {\n        if (device instanceof Laptop) {\n          secureLaptops++;\n        } else {\n          securePhones++;\n        }\n      }\n    }\n    System.out.println("Laptops: " + secureLaptops + "Phones: " + securePhones);\n  }\n}\n\n'})}),"\n",(0,s.jsx)(n.h4,{id:"operatingsystem",children:"OperatingSystem"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public enum OperatingSystem {\n  WINDOWS('W'),\n  ANDROID('A'),\n  MACOS('M'),\n  IOS('I'),\n  LINUX('L');\n\n  private char name;\n\n  OperatingSystem(char name) {\n    this.name = name;\n  }\n\n  public char getName() {\n    return name;\n  }\n\n  public boolean isMobile() {\n    return this == OperatingSystem.ANDROID || this == OperatingSystem.IOS;\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"device",children:"Device"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public abstract class Device {\n\n  private static final ArrayList<Device> allDevices = new ArrayList<>();\n  protected final OperatingSystem os;\n\n  public Device(OperatingSystem os) {\n    this.os = os;\n    Device.allDevices.add(this);\n  }\n\n  public abstract boolean isSecure();\n\n  public abstract String toString();\n\n  public static ArrayList<Device> getAllDevices() {\n    return Device.allDevices;\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"phone",children:"Phone"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public abstract class Device {\n\n  private static final ArrayList<Device> allDevices = new ArrayList<>();\n  protected final OperatingSystem os;\n\n  public Device(OperatingSystem os) {\n    this.os = os;\n    Device.allDevices.add(this);\n  }\n\n  public abstract boolean isSecure();\n\n  public abstract String toString();\n\n  public static ArrayList<Device> getAllDevices() {\n    return Device.allDevices;\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"laptop",children:"Laptop"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public class Laptop extends Device {\n  private static int MINIMUM_VERSION = 22;\n  private int version;\n\n  public Laptop(OperatingSystem os, int version) {\n    super(os);\n    this.version = version;\n  }\n\n  public boolean isSecure() {\n    return os != OperatingSystem.WINDOWS || version > Laptop.MINIMUM_VERSION;\n  }\n\n  public String toString() {\n    return "Laptop [version="\n        + version\n        + "] [isSecure="\n        + isSecure()\n        + "] [os="\n        + os.getName()\n        + "]";\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"klausur-moodle",children:"Klausur Moodle"}),"\n",(0,s.jsx)(n.h3,{id:"aufgabenstellung",children:"Aufgabenstellung"}),"\n",(0,s.jsx)(n.h4,{id:"aufgabe-1-45-punkte",children:"Aufgabe 1 (45 Punkte)"}),"\n",(0,s.jsxs)(n.p,{children:["Implementiere die Klassen ",(0,s.jsx)(n.strong,{children:"Animal"})," (2.5 Punkte), ",(0,s.jsx)(n.strong,{children:"NoSpaceException"})," (2\nPunkte), ",(0,s.jsx)(n.strong,{children:"Cage"})," (8.5 Punkte), ",(0,s.jsx)(n.strong,{children:"Area"})," (13 Punkte), ",(0,s.jsx)(n.strong,{children:"CageSpaceComparator"})," (6\nPunkte), ",(0,s.jsx)(n.strong,{children:"Zoo"})," (7 Punkte) und ",(0,s.jsx)(n.strong,{children:"ExamTask01"})," (6 Punkte) entsprechend dem\nKlassendiagramm. Befolge alle Hinweise bei der Implementierung!"]}),"\n",(0,s.jsx)(n.h5,{id:"glossar",children:"Glossar"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Englisch"}),(0,s.jsx)(n.th,{children:"Deutsch"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"animal"}),(0,s.jsx)(n.td,{children:"Tier"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"area"}),(0,s.jsx)(n.td,{children:"Bereich"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"cage"}),(0,s.jsx)(n.td,{children:"K\xe4fig"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"difference"}),(0,s.jsx)(n.td,{children:"Unterschied"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"free"}),(0,s.jsx)(n.td,{children:"frei"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"food"}),(0,s.jsx)(n.td,{children:"Essen"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"height"}),(0,s.jsx)(n.td,{children:"H\xf6he"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"level"}),(0,s.jsx)(n.td,{children:"Ebene"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"MIN_WIDTH"}),(0,s.jsx)(n.td,{children:"minimale Breite"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"space"}),(0,s.jsx)(n.td,{children:"Platz"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"NoSpaceException"}),(0,s.jsx)(n.td,{children:"Kein-Platz-Ausnahme"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"width"}),(0,s.jsx)(n.td,{children:"Breite"})]})]})]}),"\n",(0,s.jsx)(n.h5,{id:"klassendiagramm",children:"Klassendiagramm"}),"\n",(0,s.jsx)(n.mermaid,{value:"classDiagram\n   accTitle: Klassendiagramm\n   accDescr: Klassendiagramm zu Aufgabe 1\n    Zoo o-- Area\n    Zoo -- ExamTask01\n    Zoo -- CageSpaceComparator\n    Area o-- Cage\n    Area --|> Comparable~Area~ : implements\n    Cage o-- Animal\n    Cage --\x3e NoSpaceException : throws\n    Animal -- Area\n    Animal -- Zoo\n    CageSpaceComparator --|> Comparator~Area~ : implements\n    NoSpaceException --|> Exception : extends\n    Monkey --|> Animal : implements\n    Monkey -- ExamTask01\n\n\n    class ExamTask01 {\n      + main(args: String[]) void$\n    }\n\n    class Animal {\n      <<interface>>\n      getName() String\n      getNeededFood() double\n      getNeededSpace() double\n    }\n\n    class Cage {\n      +MIN_WIDTH: int &lcub; final &rcub; = 200$\n      +number: int &lcub; final &rcub;\n      +width int &lcub; final &rcub;\n      +animals: ArrayList~Animal~ &lcub; final &rcub;\n\n      +Cage(number: int, width: int)\n      +getCageSize() double\n      -getFreeSpace() double\n      +addAnimal(animal: Animal) void\n    }\n\n    class Area {\n      -number: int\n      +cages: ArrayList~Cage~ &lcub; final &rcub;\n\n      +Area(number: int)\n      +Area(number: int, numberOfCages: int)\n      +addAnimal(animal: Animal) boolean\n      +getNeededFood() double\n      compareTo(other: Area) int\n    }\n\n    class Zoo {\n      +name: String &lcub; final &rcub;\n      +areas: ArrayList~Area~ &lcub; final &rcub;\n\n      +Zoo(name: String, numberOfAreas: int)\n      +addAnimal(animal: Animal) void\n      +sortBySpace() void\n      +sortByNeededFood() void\n    }\n\n    class CageSpaceComparator {\n      compare(a1: Area, a2: Area) int\n      -getAreaSize(area: Area) double\n    }\n\n    class NoSpaceException {\n      +difference: int &lcub; final &rcub;\n\n      +NoSpaceExcepton(difference: int)\n    }\n\n    class Monkey {\n      -name: String\n      -neededFood: double\n      -neededSpace: double\n\n      +Monkey(name: String, neededFood: double, neededSpace: double)\n      getName() String\n      getNeededFood() double\n      getNeededSpace() double\n    }\n\n    class Exception {\n    }\n\n    class Comparator~Area~ {\n      compare(a1: Area, a2: Area) int\n    }\n\n    class Comparable~Area~ {\n      compareTo(other: Area) int\n    }"}),"\n",(0,s.jsx)(n.h5,{id:"hinweise-zur-klasse-nospaceexception",children:"Hinweise zur Klasse NoSpaceException"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'Der Konstruktor soll alle Attribute initialisieren und die Nachricht mit "Kein\nPlatz" initialisieren.'}),"\n"]}),"\n",(0,s.jsx)(n.h5,{id:"hinweise-zur-klasse-cage",children:"Hinweise zur Klasse Cage"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Der Konstruktor soll alle Attribute initialisieren."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Die Methode ",(0,s.jsx)(n.strong,{children:"getCageSize"})," soll die Gr\xf6\xdfe des K\xe4figs berechnen. Die Fl\xe4che\neines K\xe4figs ist immer quadratisch."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Die Methode ",(0,s.jsx)(n.strong,{children:"getFreeSpace"})," soll den freien Platz im K\xe4fig berechnen. Der\nfreie Platz berechnet sich aus der Gr\xf6\xdfe des K\xe4figs abz\xfcglich des ben\xf6tigten\nPlatzes aller Tiere im K\xe4fig."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Die Methode ",(0,s.jsx)(n.strong,{children:"addAnimal"})," soll das eingehende Tier dem K\xe4fig hinzuf\xfcgen."]}),"\n",(0,s.jsx)(n.p,{children:"Ben\xf6tigt das eingehende Tier mehr Platz als im K\xe4fig vorhanden ist, soll eine\nNoSpaceException geworfen werden, welche die Differenz des eingehenden Tieres\nund des K\xe4figs enth\xe4lt."}),"\n",(0,s.jsx)(n.p,{children:"Ist gen\xfcgend Platz f\xfcr das Tier vorhanden, darf es dem K\xe4fig zugewiesen\nwerden."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h5,{id:"hinweise-zur-klasse-area",children:"Hinweise zur Klasse Area"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Die Konstruktoren sollen alle Attribute initialisieren. Rufe im unspezifischen\nKonstruktor den spezifischen Konstruktor so auf, dass immer 2 K\xe4fige erzeugt\nwerden."}),"\n",(0,s.jsx)(n.p,{children:"Der spezifische Konstruktor soll nach der Initialisierung aller Attribute N\nK\xe4fige erzeugen. N entspricht numberOfCages. Die K\xe4fige sollen beginnend mit 1\naufsteigend nummeriert werden. Der erste K\xe4fig soll die kleinstm\xf6gliche Breite\n(MIN_WIDTH) haben. Jeder weitere generierte K\xe4fig soll 10 Einheiten breiter\nsein."}),"\n",(0,s.jsx)(n.p,{children:"Alle generierten K\xe4fige sollen dem Bereich hinzugef\xfcgt werden."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Die Methode ",(0,s.jsx)(n.strong,{children:"addAnimal"})," soll das eingehende Tier im Bereich unterbringen."]}),"\n",(0,s.jsx)(n.p,{children:"Das Tier soll im ersten freien K\xe4fig untergebracht werden. K\xe4fige, deren\nGesamtgr\xf6\xdfe kleiner als der ben\xf6tigte Platz des Tieres ist, sollen ignoriert\nwerden. Kann ein Tier in einem K\xe4fig untergebracht werden soll der Name des\nTieres, die Nummer des Bereichs und die Nummer des K\xe4figs in der Konsole\nausgegeben werden. Gib anschlie\xdfend true zur\xfcck."}),"\n",(0,s.jsx)(n.p,{children:'Bsp: "Charly added. Area: 2 Cage: 3"'}),"\n",(0,s.jsx)(n.p,{children:"Falls das Tier in einem K\xe4fig nicht untergebracht werden konnte, soll die\nDifferenz, die Nummer des Bereichs und die Nummer des K\xe4figs in der Konsole\nausgegeben werden."}),"\n",(0,s.jsx)(n.p,{children:'Bsp: "Cage um 20 zu klein. Area: 2 Cage: 3"'}),"\n",(0,s.jsx)(n.p,{children:"Konnte das Tier in keinem K\xe4fig untergebracht werden, soll false zur\xfcckgegeben\nwerden."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Die Methode ",(0,s.jsx)(n.strong,{children:"getNeededFood"})," soll das ben\xf6tigte Futter einer Area berechnen.\nHierbei soll das ben\xf6tigte Futter aller Tiere in allen K\xe4figen des Bereichs\nber\xfccksichtigt werden."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Die Methode ",(0,s.jsx)(n.strong,{children:"compareTo"})," soll die nat\xfcrliche Ordnung der Klasse Area\ndefinieren. Hierbei soll nach dem ben\xf6tigten Futter absteigend sortiert\nwerden."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h5,{id:"hinweise-zur-klasse-cagespacecomparator",children:"Hinweise zur Klasse CageSpaceComparator"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Der CageSpaceComparator soll das Comparator Interface implementieren und\nBereiche absteigend nach Bereichsgr\xf6\xdfe sortieren."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Die Methode ",(0,s.jsx)(n.strong,{children:"getAreaSize"})," soll die Gr\xf6\xdfe eines Bereichs berechnen. Dieser\nsetzt sich aus der Summe aller K\xe4figgr\xf6\xdfen zusammen."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h5,{id:"hinweise-zur-klasse-zoo",children:"Hinweise zur Klasse Zoo"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Der Konstruktor soll alle Attribute initialisieren."}),"\n",(0,s.jsx)(n.p,{children:"Der Konstruktor soll nach der Initialisierung aller Attribute N Bereiche\nerzeugen. N entspricht numberOfAreas. Die Bereiche sollen beginnend mit 0 als\nBereich aufsteigend nummeriert werden."}),"\n",(0,s.jsx)(n.p,{children:"Alle erzeugten Bereiche sollen dem Zoo hinzugef\xfcgt werden."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Die Methode ",(0,s.jsx)(n.strong,{children:"addAnimal"})," soll das eingehende Tier in einem Bereich\nunterbringen. Konnte das Tier in einem Bereich untergebracht werden, soll die\nSuche in weiteren Bereichen abgebrochen werden."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Die Methode ",(0,s.jsx)(n.strong,{children:"sortBySpace"})," soll die Bereiche nach Gr\xf6\xdfe absteigend sortieren."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Die Methode ",(0,s.jsx)(n.strong,{children:"sortByNeededFood"})," soll die Bereiche nach ihrer nat\xfcrlichen\nOrdnung sortieren."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h5,{id:"hinweise-zur-klasse-examtask01",children:"Hinweise zur Klasse ExamTask01"}),"\n",(0,s.jsx)(n.p,{children:'Es soll der Zoo "Steffens Affenparadies" mit f\xfcnf Bereichen erstellt werden.\nAnschlie\xdfend sollen folgende Affen darin untergebracht werden:'}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Name"}),(0,s.jsx)(n.th,{children:"ben\xf6tigtes Futter"}),(0,s.jsx)(n.th,{children:"ben\xf6tigter Platz"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:'"Charly"'}),(0,s.jsx)(n.td,{children:"100"}),(0,s.jsx)(n.td,{children:"200"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:'"Apu"'}),(0,s.jsx)(n.td,{children:"200"}),(0,s.jsx)(n.td,{children:"300"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"Finde anschlie\xdfend den gr\xf6\xdften K\xe4fig in dem Bereich, welcher am meisten Futter\nben\xf6tigt. Gib die Gr\xf6\xdfe des K\xe4figs abschlie\xdfend aus."}),"\n",(0,s.jsx)(n.h4,{id:"aufgabe-2-5-punkte",children:"Aufgabe 2 (5 Punkte)"}),"\n",(0,s.jsxs)(n.p,{children:["F\xfcr die Fallunterscheidung gibt es zwei M\xf6glichkeiten. Nenne ",(0,s.jsx)(n.strong,{children:"beide"})," Arten und\nerl\xe4utere die wesentlichen Unterschiede."]}),"\n",(0,s.jsx)(n.h4,{id:"java-api",children:"Java API"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Klasse"}),(0,s.jsx)(n.th,{children:"Methode"}),(0,s.jsx)(n.th,{children:"Statisch"}),(0,s.jsx)(n.th,{children:"R\xfcckgabetyp"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Boolean"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"valueOf(s: String)"})}),(0,s.jsx)(n.td,{children:"X"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Boolean"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Boolean"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"valueOf(b: boolean)"})}),(0,s.jsx)(n.td,{children:"X"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Boolean"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Double"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"valueOf(s: String)"})}),(0,s.jsx)(n.td,{children:"X"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Double"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Double"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"valueOf(d: double)"})}),(0,s.jsx)(n.td,{children:"X"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Double"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Integer"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"valueOf(s: String)"})}),(0,s.jsx)(n.td,{children:"X"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Integer"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Integer"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"valueOf(i: int)"})}),(0,s.jsx)(n.td,{children:"X"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Integer"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"charAt(index: int)"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"char"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"length()"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"int"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"split(regex: String)"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String[]"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"toLowerCase()"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"toUpperCase()                             "})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String"})})]})]})]}),"\n",(0,s.jsx)(n.h4,{id:"java-collections-framework",children:"Java Collections Framework"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Klasse"}),(0,s.jsx)(n.th,{children:"Methode"}),(0,s.jsx)(n.th,{children:"Statisch"}),(0,s.jsx)(n.th,{children:"R\xfcckgabetyp"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ArrayList<T>"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"add(element: T)"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ArrayList<T>"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"add(index: int, element: T)"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"void"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ArrayList<T>"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"contains(element: T)"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ArrayList<T>"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"get(index: int)"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"T"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ArrayList<T>"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"remove(index: int)"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"T"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ArrayList<T>"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"remove(element: T)"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ArrayList<T>"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"size()"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"int"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Collections"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"sort(list: List<T>)"})}),(0,s.jsx)(n.td,{children:"X"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"void"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Collections"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"sort(list: List<T>, c: Comparator<T>)"})}),(0,s.jsx)(n.td,{children:"X"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"void"})})]})]})]}),"\n",(0,s.jsx)(n.h4,{id:"schnittstellen",children:"Schnittstellen"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Klasse"}),(0,s.jsx)(n.th,{children:"Methode"}),(0,s.jsx)(n.th,{children:"Statisch"}),(0,s.jsx)(n.th,{children:"R\xfcckgabetyp"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Comparable<T>"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"compareTo(o: T)"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"int"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Comparator<T>"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"compare(o1: T, o2: T)               "})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"int"})})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"l\xf6sungsvorschlag",children:"L\xf6sungsvorschlag"}),"\n",(0,s.jsx)(n.h4,{id:"aufgabe-1-45-punkte-1",children:"Aufgabe 1 (45 Punkte)"}),"\n",(0,s.jsx)(n.h5,{id:"animal-25-punkte",children:"Animal (2.5 Punkte)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public interface Animal {\n  public String getName();\n  public double getNeededFood();\n  public double getNeededSpace();\n}\n"})}),"\n",(0,s.jsx)(n.h5,{id:"cage-85-punkte",children:"Cage (8.5 Punkte)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public class Cage {\n  public static final int MIN_WIDTH = 200;\n  public final int number;\n  public final int width;\n  public final ArrayList<Animal> animals;\n\n  public Cage(int number, int width) {\n    this.number = number;\n    this.width = width;\n    this.animals = new ArrayList<>();\n  }\n\n  public void addAnimal(Animal animal) throws NoSpaceException {\n    if (animal.getNeededSpace() > getFreeSpace()) {\n      throw new NoSpaceException(animal.getNeededSpace() - getFreeSpace());\n    } else {\n      this.animals.add(animal);\n    }\n  }\n\n\n  public double getCageSize() {\n    return width * width;\n  }\n\n  private double getFreeSpace() {\n    double usedSpace = 0;\n    for (Animal animal : animals) {\n      usedSpace += animal.getNeededSpace();\n    }\n    return getCageSize() - usedSpace;\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h5,{id:"nospaceexception-2-punkte",children:"NoSpaceException (2 Punkte)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public class NoSpaceException extends Exception {\n  public final double difference;\n\n  public NoSpaceException(double difference) {\n    super("Kein Platz");\n    this.difference = difference;\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h5,{id:"area-13-punkte",children:"Area (13 Punkte)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public class Area implements Comparable<Area> {\n  private int number;\n  public final ArrayList<Cage> cages;\n\n  public Area(int number) {\n    this(number, 2);\n  }\n\n  public Area(int number, int numberOfCages) {\n    this.number = number;\n    this.cages = new ArrayList<>();\n    int width = Cage.MIN_WIDTH;\n    for (int i = 0; i < numberOfCages; i++) {\n      this.cages.add(new Cage(i + 1, width));\n      width = width + 10;\n    }\n  }\n\n  public boolean addAnimal(Animal animal) {\n    for (Cage cage : cages) {\n      if (cage.getCageSize() > animal.getNeededSpace()) {\n        try {\n          cage.addAnimal(animal);\n          System.out.println(\n              animal.getName()\n                  + " added. Area Nr: "\n                  + number\n                  + " Cage Nr: "\n                  + cage.number);\n          return true;\n        } catch (NoSpaceException e) {\n          System.out.println(\n              "Cage um "\n                  + e.difference\n                  + " zu klein. Area Nr: "\n                  + number\n                  + " Cage Nr: "\n                  + cage.number);\n        }\n      }\n    }\n    return false;\n  }\n\n  @Override\n  public int compareTo(Area other) {\n    if (other.getNeededFood() > this.getNeededFood()) {\n      return -1;\n    } else if(other.getNeededFood() < this.getNeededFood()) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n  public double getNeededFood() {\n    double neededFood = 0;\n    for (Cage cage : cages) {\n      for (Animal animal : cage.animals) {\n        neededFood += animal.getNeededFood();\n      }\n    }\n    return neededFood;\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h5,{id:"cagespacecomparator-6-punkte",children:"CageSpaceComparator (6 Punkte)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public class CageSpaceComparator implements Comparator<Area> {\n\n  @Override\n  public int compare(Area area1, Area area2) {\n    double v1 = getAreaSize(area1);\n    double v2 = getAreaSize(area2);\n    if (v1 > v2) {\n      return -1;\n    } else if (v2 > v1) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n  private double getAreaSize(Area area) {\n    double value = 0;\n    for (Cage cage : area.cages) {\n      value += cage.getCageSize();\n    }\n    return value;\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h5,{id:"zoo-7-punkte",children:"Zoo (7 Punkte)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public class Zoo {\n  public final String name;\n  public final ArrayList<Area> areas;\n\n  public Zoo(String name, int numberOfAreas) {\n    this.name = name;\n    this.areas = new ArrayList<>();\n    for (int i = 0; i < numberOfAreas; i++) {\n      this.areas.add(new Area(i));\n    }\n  }\n\n  public void addAnimal(Animal animal) {\n    for (Area area : areas) {\n      if (area.addAnimal(animal)) {\n        break;\n      }\n    }\n  }\n\n  public void sortBySpace() {\n    Collections.sort(areas, new CageSpaceComparator());\n  }\n\n  public void sortByNeededFood() {\n    Collections.sort(areas);\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h5,{id:"examtask01-6-punkte",children:"ExamTask01 (6 Punkte)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public class ExamTask01 {\n  public static void main(String[] args) {\n    Zoo zoo = new Zoo("Steffens Affenparadies", 5);\n    zoo.addAnimal(new Monkey("Charly", 100, 200));\n    zoo.addAnimal(new Monkey("Apu", 200, 300));\n    zoo.sortByNeededFood();\n    Area firstArea = zoo.areas.get(0);\n    double value = 0;\n    for (Cage cage : firstArea.cages) {\n      if (cage.getCageSize() > value) {\n        value = cage.getCageSize();\n      }\n    }\n    System.out.println("Gr\xf6\xdfter K\xe4fig im hungrigsten Bereich: " + value);\n  }\n}\n'})})]})}function h(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},1153:function(e,n,i){i.d(n,{Z:function(){return r}});let r=i.p+"assets/files/exam-3ff9538ab69b64f7ac0612da10f14efd.pdf"},42812:function(e,n,i){i.d(n,{Z:function(){return r}});let r=i.p+"assets/files/java-api-8cb520fc4f8f5747084441d71aadcbff.pdf"},6887:function(e,n,i){i.d(n,{Z:function(){return r}});let r=i.p+"assets/files/task-1-diagram-5894f080cceea3feec03b4643ac67097.pdf"},61705:function(e,n,i){i.d(n,{Z:function(){return r}});let r=i.p+"assets/files/task-1-906fc58727fbd0933bda08d5c7399842.pdf"},624:function(e,n,i){i.d(n,{Z:function(){return r}});let r=i.p+"assets/files/task-2-diagram-45da23c21780383c2b82c1910a553079.pdf"},47863:function(e,n,i){i.d(n,{Z:function(){return r}});let r=i.p+"assets/files/task-2-e0cc8a899eac576322922fb3ddab5ef5.pdf"},94594:function(e,n,i){i.d(n,{Z:function(){return r}});let r=i.p+"assets/files/task-3-a05f1a1bba9b168d882387ecebe3ed28.pdf"},50065:function(e,n,i){i.d(n,{Z:function(){return d},a:function(){return l}});var r=i(67294);let s={},a=r.createContext(s);function l(e){let n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);